package by.mglv.epam.bykhauski.first;

import java.util.Scanner;

//–õ–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
public class Task1 {

    // #1. –ù–∞–π–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: z = ( (a ‚Äì 3 ) * b / 2) + c
    public static void task1 () {
        double z=0;
        System.out.println("Enter the parameters of function z = ( (a ‚Äì 3 ) * b / 2) + c  ");
        System.out.println(" a= ");
        double a=enterVar();
        System.out.println(" b= ");
        double b=enterVar();
        System.out.println(" c= ");
        double c=enterVar();
        z = (a - 3)*b/2+c;
        System.out.println("z =" + z);
    }

    public static double enterVar(){
        double rezult=0;
        Scanner scanner=new Scanner(System.in);
        if (scanner.hasNextDouble()) {rezult=scanner.nextDouble();
        } else {
            System.out.println("wrong enter, try again:");
            enterVar();}
        return rezult;
    }

    // #2. –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):
    // (ùëè + ‚àö(ùëè^2 + 4ùëéùëê))/2a-ùëé^3ùëê + ùëè^(‚àí2)
    public static void task2 (){
        System.out.println("Enter the parameters of function  (\uD835\uDC4F + ‚àö(\uD835\uDC4F^2 + 4\uD835\uDC4E\uD835\uDC50))/2a-\uD835\uDC4E^3\uD835\uDC50 + \uD835\uDC4F^(‚àí2) ");

        System.out.println(" a= ");
        double a=0;
        boolean check=true;
        while (check) {
            a = enterVar();
            if (a != 0) {
                check = false;
            } else {
                System.out.println("a must be != 0 , reenter please ");
            }
        }

        System.out.println(" b= ");
        double b=enterVar();
        System.out.println(" c= ");
        double c=enterVar();
        double z1=b*b+4*a*c;
        if (z1<0 || a==0)  {
            System.out.println("b^2 + 4\uD835\uDC4E\uD835\uDC50 - Must be >=0");
        } else {
            double rezult=(b+Math.sqrt(z1))/(2*a)-Math.pow(a,3)*c+Math.pow(b,-2);
            System.out.println("rezult is: " + rezult);}

    }


    // #3. –í—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è):
    //(ùë†ùëñùëõ ùë• + ùëêùëúùë† ùë¶)/(ùëêùëúùë† ùë• ‚àí ùë†ùëñùëõ ùë¶) ‚àó ùë°ùëî ùë•ùë¶
    public static void task3 (){
        System.out.println("Enter the parameters X and Y");
        System.out.println(" X= ");
        double x=enterVar();
        System.out.println(" Y= ");
        double y=enterVar();
        double rezult=(Math.sin(x)+Math.cos(y))/(Math.cos(x)-Math.sin(x))*Math.tan(x*y);
        System.out.println("rezult is: " + rezult);
    }

    // 4. –î–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ R –≤–∏–¥–∞ nnn.ddd (—Ç—Ä–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–∞–∑—Ä—è–¥–∞ –≤ –¥—Ä–æ–±–Ω–æ–π –∏ —Ü–µ–ª–æ–π —á–∞—Å—Ç—è—Ö). –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
    //–¥—Ä–æ–±–Ω—É—é –∏ —Ü–µ–ª—É—é —á–∞—Å—Ç–∏ —á–∏—Å–ª–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–∞.
    public static void task4 (){
        System.out.println("Enter the number R by format nnn.ddd ");
        double r=enterVar();
        double rezult = (int)((r*1000)%1000)+(double)((int)r)/1000;
        System.out.println("rezult is: " + rezult);
    }

    // #5. –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¢, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –í—ã–≤–µ—Å—Ç–∏
    // –¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∞—Å–∞—Ö, –º–∏–Ω—É—Ç–∞—Ö –∏ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º–µ:
    // –ù–ù—á –ú–ú–º–∏–Ω SSc.
    public static void task5 (){
        System.out.println("Enter the quantity of seconds: ");
        int t= (int)enterVar();
        System.out.println((int)(t/3600)+"—á "+(int)((t%3600)/60)+"–º–∏–Ω " + t%3600%60+ "c");
    }

    // #6. –î–ª—è –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∏–Ω–µ–π–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—á–∞—Ç–∞–µ—Ç true, –µ—Å–ª–∏ —Ç–æ—á–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (—Ö, —É)
    // –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–∞–∫—Ä–∞—à–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏, –∏ false ‚Äî –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ:
    public static void task6 (){
        System.out.println("Enter coordinates X and Y of point: ");
        System.out.println(" X= ");
        int x= (int) enterVar();
        System.out.println(" Y= ");
        int y= (int) enterVar();
        if ((x<=2 && x>= -2 && y<=4 && y>=-3) || (x<=4 && x>= -4 && y<=0 && y>=-3 )) {
            System.out.println(true);
        } else {
            System.out.println(false);
        }
    }

    // –í–µ—Ç–≤–ª–µ–Ω–∏—è

    // #1 –î–∞–Ω—ã –¥–≤–∞ —É–≥–ª–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö). –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –∏ –µ—Å–ª–∏ –¥–∞, —Ç–æ –±—É–¥–µ—Ç –ª–∏
    //    –æ–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º.

    public static void task7 (){
        System.out.println("Enter two angles of triangle: ");
        System.out.println(" 1:  ");
        int x1=0;
        boolean check=true;
        while (check) {
            x1 = (int)enterVar();
            if (x1 > 0) {
                check = false;
            } else {
                System.out.println("angle  must be > 0 , reenter please ");
            }
        }

        System.out.println(" 2:  ");
        int x2=0;
        check=true;
        while (check) {
            x2 = (int)enterVar();
            if (x2 > 0) {
                check = false;
            } else {
                System.out.println("angle  must be > 0 , reenter please ");
            }
        }

        if ((x1+x2)<180) {
            System.out.println("Triangle is exist ");
            if (x1==90 || x2==90 || (x1+x2)==90) {
                System.out.println("The triangle is rectangular");
            }
        } else {System.out.println("Triangle is not exist ");}
    }

    // #2 –ù–∞–π—Ç–∏ max{min(a, b), min(c, d)}.
    //    –æ–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–º.
    public static void task8 (){
        System.out.println("Enter a,b,c,d for expressions: max{min(a, b), min(c, d)} ");
        System.out.println(" a= ");
        double a=enterVar();
        System.out.println(" b= ");
        double b=enterVar();
        System.out.println(" c= ");
        double c=enterVar();
        System.out.println(" d= ");
        double d=enterVar();

        //ver.1
        double min1=0;
        double min2=0;
        double rezultMax=0;
        if (a<b) {min1=a;} else {min1=b;}
        if (c<d) {min2=c;} else {min2=d;}
        rezultMax = min1<min2? min2:min1;
        System.out.println("vers.1 - rezult is: " + rezultMax);
        //ver.2
        System.out.println("vers.2 - rezult is: " + Math.max(Math.min(a,b),Math.min(c,d)));
    }


    // #3 –î–∞–Ω—ã —Ç—Ä–∏ —Ç–æ—á–∫–∏ –ê(—Ö1,—É1), –í(—Ö2,—É2) –∏ –°(—Ö3,—É3). –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –±—É–¥—É—Ç –ª–∏ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä—è–º–æ–π.

    public static void task9 () {
        System.out.println("Enter –ê(—Ö1,—É1), –í(—Ö2,—É2) –∏ –°(—Ö3,—É3) (points must be different): ");
        System.out.println(" x1= ");
        double x1 = enterVar();
        System.out.println(" y1= ");
        double y1 = enterVar();
        System.out.println(" x2= ");
        double x2 = enterVar();
        System.out.println(" —É2= ");
        double y2 = enterVar();
        System.out.println(" x3= ");
        double x3 = enterVar();
        System.out.println(" —É3= ");
        double y3 = enterVar();

        boolean chekPintsToDifferent = true;
        if ((x1 == x2 && y1 == y2) || (x2 == x3 && y2 == y3) || (x3 == x1 && y3 == y1)) {
            chekPintsToDifferent = false;
            System.out.println("Points must be different, because in other case it always located on 1 strait line ");
        }

        if (chekPintsToDifferent == true) {
            if ((x3 - x1) / (x2 - x1) - (y3 - y1) / (y2 - y1) == 0) {
                System.out.println("the points are located on 1 straight line");
            } else {
                System.out.println("the points are not located on 1 straight line");
            }


        }
    }

    // #4 –ó–∞–¥–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –ê, –í –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ä—Å—Ç–∏—è –∏ —Ä–∞–∑–º–µ—Ä—ã —Ö, —É, z –∫–∏—Ä–ø–∏—á–∞. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø—Ä–æ–π–¥–µ—Ç –ª–∏ –∫–∏—Ä–ø–∏—á —á–µ—Ä–µ–∑
    //–æ—Ç–≤–µ—Ä—Å—Ç–∏–µ
    public static void task10 () {
        System.out.println("Enter dimensions of hole A , B : ");
        System.out.println(" A= ");
        double a = enterVar();
        System.out.println(" B= ");
        double b = enterVar();
        System.out.println("Enter dimensions of Brick x,y,z: ");
        System.out.println(" x= ");
        double x = enterVar();
        System.out.println(" —É= ");
        double y = enterVar();
        System.out.println(" z= ");
        double z = enterVar();







    }



} // end class
